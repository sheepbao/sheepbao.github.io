<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on boya blog</title>
    <link>https://zboya.github.io/post/</link>
    <description>Recent content in Posts on boya blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Aug 2018 18:58:40 +0800</lastBuildDate>
    
	<atom:link href="https://zboya.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang二级指针操作链表</title>
      <link>https://zboya.github.io/post/list_of_pointer_to_pointer/</link>
      <pubDate>Sun, 26 Aug 2018 18:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/list_of_pointer_to_pointer/</guid>
      <description>golang利用二级指针操作链表 以下所有观点都是个人愚见，有不同建议或补充的的欢迎emial我aboutme
导读 之前开了个项目来看golang runtime源码https://github.com/sheepbao/golang_runtime_reading，发现实现全局P链表的代码挺有趣的，遂研究记录一下。
先看个例子 package ptplist import ( &amp;quot;log&amp;quot; &amp;quot;testing&amp;quot; &amp;quot;unsafe&amp;quot; ) type puintptr uintptr //go:nosplit func (pp puintptr) ptr() *p { return (*p)(unsafe.Pointer(pp)) } //go:nosplit func (pp *puintptr) set(p *p) { *pp = puintptr(unsafe.Pointer(p)) } type p struct { id int link puintptr } var pidleList puintptr func pidleput(_p_ *p) { _p_.link = pidleList pidleList.set(_p_) } func pidleget() *p { _p_ := pidleList.ptr() if _p_ != nil { pidleList = _p_.</description>
    </item>
    
    <item>
      <title>gvisor的网络栈实现-简介</title>
      <link>https://zboya.github.io/post/google_golang_netstack/</link>
      <pubDate>Sat, 30 Jun 2018 10:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/google_golang_netstack/</guid>
      <description>gvisor的网络栈实现-简介 这篇是一系列文章的第一篇，介绍网络栈的基础知识。文章打算从上层往下层写，后面打算的继续写的内容有：
netstack-基本数据结构的实现
netstack-udp的实现
netstack-tcp的实现
netstack-ip的实现
netstack-link的实现
以下所有观点都是个人愚见，有不同建议或补充的的欢迎emialaboutme
原文章地址
gvisor简介 gvisor是google新推出一款沙箱运行时，他可以和docker和k8s无缝连接。 gVisor能够在保证轻量化优势的同时，提供与虚拟机类似的隔离效果。gVisor的核心为一套运行非特权普通进程的内核， 且支持大多数Linux系统调用。该内核使用Go编写，这主要是考虑到Go语言拥有良好的内存管理机制与类型安全性。 与在虚拟机当中一样，gVisor沙箱中运行的应用程序也将获得自己的内核与一组虚拟设备——这一点与主机及其它沙箱方案有所区别。 当然gvisor实现的不仅仅是一个完整的网络栈，还实现了文件系统等，但这里我只对网络栈感兴趣，所以也只讲网络栈的实现
netstack gvisor的网络实现在readme里有介绍，是另一个google项目，netstack, 详细介绍期源码前我们先复习一下网络栈的一些知识。
理论和现实 网络信息的传输其实很复杂，一个信息传到另一个地方，需要各种过五关斩六将。但庆幸的是，网络硬件已经帮我们做了大部分的事，我们只要考虑软件的事。
理论七层模型 +------------------------------+ | 应用层 | Application +------------------------------+ | 表示层 | Presentation +------------------------------+ | 会话层 | Session +------------------------------+ | 传输层 | Transport +------------------------------+ | 网络层 | Network +------------------------------+ | 链路层 | Link +------------------------------+ | 物理层 | Physical +------------------------------+  现实五层模型（tcpip网络分层） +------------------------------+ | 应用层 | Application +------------------------------+ | 传输层 | Transport +------------------------------+ | 网络层 | Network +------------------------------+ | 链路层 | Link +------------------------------+ | 物理层 | Physical +------------------------------+  现实中大部分的实现都是按tcpip网络分层来实现的，netstack也不例外，可以说现在的网络是tcpip的天下，据说史前公网上还是有其他协议的， 反正数据包不是用ip报文来传输的，但后来都被淘汰了，作为一个90后，我也只是听说，从来没见过除了ip之外的其他协议，即使有，现在也不必深究。 netstack其实只实现了链路层、网络层、传输层这三层。</description>
    </item>
    
    <item>
      <title>golang在自定义的https服务器中启用pprof接口</title>
      <link>https://zboya.github.io/post/golang_pprof_over_https/</link>
      <pubDate>Sun, 20 May 2018 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_pprof_over_https/</guid>
      <description>以下所有观点都是个人愚见，有不同建议或补充的的欢迎emial, aboutme
原文章地址
pprof的简介 pprof是golang标准库里面的其中一个库，它通过其HTTP服务器得到运行时的分析数据，从而给pprof可视化工具提供数据分析来源。它可以用来分析性能消耗，分析内存泄漏，死锁等。
具体使用可以了解官方包pprof，那我如何在http中使用pprof？如何在已有http或者https服务上使用pprof呢？ 这些答案在标准库找不到，随在此记录一下。
如何启动pprof 在官方包中已经给出了例子:
package main import &amp;quot;net/http&amp;quot; import _ &amp;quot;net/http/pprof&amp;quot; // 初始化pprof func main() { // do something ... go func() { log.Println(http.ListenAndServe(&amp;quot;localhost:6060&amp;quot;, nil)) //启动http服务器 }() }  启动完后，就可以使用go自动的工具go tool pprof
如：
go tool pprof http://localhost:6060/debug/pprof/heap // 获取堆的相关数据 go tool pprof http://localhost:6060/debug/pprof/profile // 获取30s内cpu的相关数据 go tool pprof http://localhost:6060/debug/pprof/block // 在你程序调用 runtime.SetBlockProfileRate ，查看goroutine阻塞的相关数据 go tool pprof http://localhost:6060/debug/pprof/mutex // 在你程序调用 runtime.SetMutexProfileFraction，查看谁占用mutex  为什么我自定义mux的http服务不能用？ 启动自定义mux的http服务器
package main import ( &amp;quot;net/http&amp;quot; _ &amp;quot;net/http/pprof&amp;quot; ) func main() { // 启动一个自定义mux的http服务器 mux := http.</description>
    </item>
    
    <item>
      <title>在Golang中各种永远阻塞的姿势</title>
      <link>https://zboya.github.io/post/golang_diff_ways_block_forever/</link>
      <pubDate>Tue, 24 Apr 2018 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_diff_ways_block_forever/</guid>
      <description>在Golang中各种永远阻塞的姿势 Go的运行时的当前设计，假定程序员自己负责检测何时终止一个goroutine以及何时终止该程序。 可以通过调用os.Exit或从main()函数的返回来以正常方式终止程序。而有时候我们需要的是使程序阻塞在这一行。
使用sync.WaitGroup 一直等待直到WaitGroup等于0
package main import &amp;quot;sync&amp;quot; func main() { var wg sync.WaitGroup wg.Add(1) wg.Wait() }  空select select{}是一个没有任何case的select，它会一直阻塞
package main func main() { select{} }  死循环 虽然能阻塞，但会100%占用一个cpu。不建议使用
package main func main() { for {} }  用sync.Mutex 一个已经锁了的锁，再锁一次会一直阻塞，这个不建议使用
package main import &amp;quot;sync&amp;quot; func main() { var m sync.Mutex m.Lock() m.Lock() }  os.Signal 系统信号量，在go里面也是个channel，在收到特定的消息之前一直阻塞
package main import ( &amp;quot;os&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;os/signal&amp;quot; ) func main() { sig := make(chan os.</description>
    </item>
    
    <item>
      <title>利用DDoS模型来通信</title>
      <link>https://zboya.github.io/post/p2p_by_non_servers/</link>
      <pubDate>Fri, 09 Mar 2018 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/p2p_by_non_servers/</guid>
      <description>利用DDoS来通信 前两天看到一个新闻，世界上最大的同性交友网站github遭受了DDoS攻击了，最高的流量达到1.35Tbps（心疼github 10秒钟）。有别于普通的DDoS，该DDoS称为反射型DDoS攻击，也称放大型攻击，我个人认为放大型攻击毕竟形象。
以下想法纯属个人意见。有不同建议或补充的的欢迎emial我aboutme
放大型DDoS攻击的原理简单解释 一句话解释就是攻击者伪装源目标服务器IP，发送给中间人，中间人放大后发送给目标服务器。 稍微详细的讲：假设有三台服务器A、B、C，A的IP为ip1，B的IP为ip2, C的IP为ip3，A要攻击C。
 +------+ +------+ +------+ | | | | ----&amp;gt; | | | A | ---&amp;gt; | B | ----&amp;gt; | C | | | | | ----&amp;gt; | | +------+ +------+ +------+ ip1 ip2 ip3  放大型攻击的前提条件是，有个服务器会放大你的报文，并返回给你，比如这的B服务器，假设它监听UDP端口6677，且你给这个UDP端口发送消息（或者特定的消息）后会返回更多的数据给你。那么攻击者A只需要做以下事情。
A发送数据给B，并更改自己的源IP为ip3，B接收到A的数据后根据源IP返回给原来的IP地址，也就是C，此时C就收到了来自A的成吨伤害，因为B将数据包放大了，原来A可能只发送了“hello”给B，而B却发送了“hello，hello，hello”给C。
放大型DDoS攻击也是一种通信模型 其实仔细想想，放大型DDoS攻击也是一种通信模型，这种模型将A的数据发送给了C，这模型很有意思是，我发送的源IP变成了我真正的目的IP，我在想，那么在公网上我更改ICMP报文的源IP，然后利用ICMP的payload来实现自己的协议，从而完成A到C的通信。不过这种模型有个很致命的特点，就是不能实现两个都在内网的机器通信，假设A、C都在内网，B在公网，A发送到B的数据包经过snat后，源IP都被更改为了A出口路由器的IP了。A、C一个在公网一个在内网也可以通信，不过需要知道C的mac地址，和公网IP。
利用这种模型来选路？ 如果在有些条件下，A可以访问B，但A不能直接访问C，而B可以访问C，我又不想申请任何服务器，那么理论上可以利用这个模型来通信。 假设A在内网内，B是公网中的一些服务器。
 找到B服务器，B服务器的条件是，只要没有禁止ping包（当然有其他反射型的端口报文也可以）。
 需要有自己的C服务器，来接收B发送的报文并处理。 更改A的源IP为C的IP，发送报文即可。  其实如果能找到有那么一种B服务器，能发射TCP数据包，理论上没有C也可以访问在C区域的一些公开服务。
结论 以上纯属个人瞎想。</description>
    </item>
    
    <item>
      <title>golang for语句完全指南</title>
      <link>https://zboya.github.io/post/golang_for_range_complete_guide/</link>
      <pubDate>Sat, 13 Jan 2018 19:35:15 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_for_range_complete_guide/</guid>
      <description>以下所有观点都是个人愚见，有不同建议或补充的的欢迎emialaboutme
原文章地址
关于for语句的疑问
for语句的规范
for语句的内部实现-array
问题解答
关于for语句的疑问 我们都知道在golang中，循环语句只有for这一个，在代码中写一个循环都一般都需要用到for(当然你用goto也是可以的)， 虽然golang的for语句很方便，但不少初学者一样对for语句持有不少疑问，如：
 for语句一共有多少种表达式格式？ for语句中临时变量是怎么回事？（为什么有时遍历赋值后，所有的值都等于最后一个元素） range后面支持的数据类型有哪些？ range string类型为何得到的是rune类型？ 遍历slice的时候增加或删除数据会怎么样？ 遍历map的时候增加或删除数据会怎么样？  其实这里的很多疑问都可以看golang编程语言规范, 有兴趣的同学完全可以自己看，然后根据自己的理解来解答这些问题。
for语句的规范 for语句的功能用来指定重复执行的语句块，for语句中的表达式有三种：
官方的规范： ForStmt = &amp;quot;for&amp;quot; [ Condition | ForClause | RangeClause ] Block .
 Condition = Expression .
 ForClause = [ InitStmt ] &amp;ldquo;;&amp;rdquo; [ Condition ] &amp;ldquo;;&amp;rdquo; [ PostStmt ] .
 RangeClause = [ ExpressionList &amp;ldquo;=&amp;rdquo; | IdentifierList &amp;ldquo;:=&amp;rdquo; ] &amp;ldquo;range&amp;rdquo; Expression .
  单个条件判断 形式：</description>
    </item>
    
    <item>
      <title>链表以及golang介入式链表的实现</title>
      <link>https://zboya.github.io/post/golang_list/</link>
      <pubDate>Sat, 14 Oct 2017 18:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_list/</guid>
      <description>链表以及golang介入式链表的实现 今天看tcp/ip协议栈的代码时看到一个双向链表，链表吗？听过它的顶顶大名，知道它是由节点构成的，每个节点还有个指针指向下一个节点，但是从来没自己实现过一个，没有实践就不能深刻理解，遂有此文。
以下所有观点都是个人愚见，有不同建议或补充的的欢迎emial我aboutme
何为链表？ 链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。
简单的说链表是一个具有逻辑顺序的线性表，每一个节点里存到下一个节点的指针。
图示 单链表 双向链表 链表有啥用？ 因为链表插入很快，而且具有动态性，想添加几个元素就添加几个（内存空间足够），不像数组一样那么死板，正因为链表的灵活性，所有链表的用处是大大的有啊。
链表最适合用于频繁更新变化的数据，比如一个需要异步执行并且不可丢失的命令序列、一个需要进行实时加载与卸载的驱动，无序且数量未知，这个时候就需要链表结构来协助完成数据的管理。如果不需要过度关注数据的顺序，还可以用链表方便快捷地在任意一个地方插入或删除一个元素，并且不会影响到其它的元素。
又或者我在今天看tcp/ip源码中，链表用来构造队列，作为数据段的队列。我想链表用于队列应该是最多的。如果你看过linux内核源码，应该会发现linux内核中多处使用链表这种结构。
go标准库的双向链表 golang的标准库中实现了一个双向链表，该链表可以存储任何数据，先看看使用标准库链表的例子：
package list_test import ( &amp;quot;container/list&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;testing&amp;quot; ) func TestList(t *testing.T) { // Create a new list and put some numbers in it. l := list.New() e4 := l.PushBack(4) e1 := l.PushFront(1) l.InsertBefore(3, e4) l.InsertAfter(2, e1) // Iterate through list and print its contents. for e := l.Front(); e != nil; e = e.</description>
    </item>
    
    <item>
      <title>golang string和[]byte的对比</title>
      <link>https://zboya.github.io/post/golang_byte_slice_and_string/</link>
      <pubDate>Sat, 30 Sep 2017 16:42:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_byte_slice_and_string/</guid>
      <description>golang string和[]byte的对比 为啥string和[]byte类型转换需要一定的代价？
为啥内置函数copy会有一种特殊情况copy(dst []byte, src string) int?
string和[]byte，底层都是数组，但为什么[]byte比string灵活，拼接性能也更高（动态字符串拼接性能对比）?
今天看了源码探究了一下。
以下所有观点都是个人愚见，有不同建议或补充的的欢迎emial我aboutme
何为string？ 什么是字符串？标准库builtin的解释：
type string string is the set of all strings of 8-bit bytes, conventionally but not necessarily representing UTF-8-encoded text. A string may be empty, but not nil. Values of string type are immutable.  简单的来说字符串是一系列8位字节的集合，通常但不一定代表UTF-8编码的文本。字符串可以为空，但不能为nil。而且字符串的值是不能改变的。
不同的语言字符串有不同的实现，在go的源码中src/runtime/string.go，string的定义如下：
type stringStruct struct { str unsafe.Pointer len int }  可以看到str其实是个指针，指向某个数组的首地址，另一个字段是len长度。那到这个数组是什么呢？ 在实例化这个stringStruct的时候：
func gostringnocopy(str *byte) string { ss := stringStruct{str: unsafe.</description>
    </item>
    
    <item>
      <title>TCP RTO计算方法以及go实现验证</title>
      <link>https://zboya.github.io/post/tcp_rto_research_and_golang_implement/</link>
      <pubDate>Mon, 04 Sep 2017 14:59:59 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/tcp_rto_research_and_golang_implement/</guid>
      <description>TCP RTO计算方法和思考以及go实现验证 概述 最近在研究tcp的重传机制，tcp的重传大概有三种，超时重传(rto)、快速重传(fack)、早期重传(er)。今天讲讲rto，并用go实现其算法，探究一下。主要参考tcp/ip-guid
基本概念 RTO即超时重传时间
RTT数据包往返时间
平均偏差是指单项测定值与平均值的偏差（取绝对值）之和，除以测定次数。
RTO计算算法 RTO的计算依赖于RTT值，或者说一系列RTT值。rto=f(rtt)
在Linux中，最开始实现的是一个比较简单的经典算法RFC793，后来1988年提出了新的算法计算rto值，文档为RFC6298. 下面对比一下两种算法。
经典算法 rfc原文  An Example Retransmission Timeout Procedure Measure the elapsed time between sending a data octet with a particular sequence number and receiving an acknowledgment that covers that sequence number (segments sent do not have to match segments received). This measured elapsed time is the Round Trip Time (RTT). Next compute a Smoothed Round Trip Time (SRTT) as: SRTT = ( ALPHA * SRTT ) + ((1-ALPHA) * RTT) and based on this, compute the retransmission timeout (RTO) as: RTO = min[UBOUND,max[LBOUND,(BETA*SRTT)]] where UBOUND is an upper bound on the timeout (e.</description>
    </item>
    
    <item>
      <title>Golang walkthrough: io package</title>
      <link>https://zboya.github.io/post/golang_walkthrough_io/</link>
      <pubDate>Mon, 28 Aug 2017 18:10:14 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_walkthrough_io/</guid>
      <description>Golang walkthrough: io package Go是用于处理字节的编程语言。 无论您有字节列表，字节流还是单个字节，Go都可以轻松处理。 从这些简单的原语，我们构建了我们的抽象和服务。 io包是标准库中最基础的包之一。 它提供了一组用于处理字节流的接口和助手。
这篇文章是一系列演练的一部分，可以帮助您更好地了解标准库。 虽然官方的文档提供了大量的信息，但是在现实世界的环境中还是很难理解库的意思。 本系列旨在提供如何在每天应用程序中使用标准库包的上下文。 如果您有任何问题或意见，可以在Twitter上的@benbjohnson与我联系。（当然也可以联系我，listomebao@gmail.com）
Reading bytes 字节有两个最基本的操作，读和写。让我们先看如何读字节。
Reader interface 从数据流读取字节最基本的结构是Reader接口：
type Reader interface { Read(p []byte) (n int, err error) }  该接口贯穿在整个标准库中的实现，从网络连接到文件都是内存片的包装。
读取器通过将缓冲区p传递给Read()方法，以便我们可以重用相同的字节。 如果Read()返回一个字节片而不是接受一个参数，那么读者将不得不在每个Read()调用上分配一个新的字节片。 这将对垃圾收集器造成严重破坏。
Reader接口的一个问题是它附带了一些细微的规则。 首先，当流完成时，它返回一个io.EOF错误作为使用的正常部分。 这可能会让初学者感到困惑。 其次，您的缓冲区不能保证填写。 如果您传递8字节的片段，则可以在0到8个字节之间的任何地方接收。 处理部分读取可能是凌乱和容易出错的。 幸运的是有这些问题的帮助函数。
Improving reader guarantees 假设你有一个协议你正在解析，你知道你需要从阅读器读取一个8字节的uint64值。 在这种情况下，最好使用io.ReadFull()，因为你有一个固定的大小读取：
func ReadFull(r Reader, buf []byte) (n int, err error)  此功能确保您的缓冲区在返回前完全填充数据。 如果您的缓冲区部分读取，那么您将收到一个io.ErrUnexpectedEOF。 如果没有读取字节，则返回io.EOF。 这个简单的保证可以极大地简化你的代码。 要读取8个字节，您只需要这样做：
buf := make([]byte, 8) if _, err := io.</description>
    </item>
    
    <item>
      <title>Linux 中的虚拟网络-简介</title>
      <link>https://zboya.github.io/post/virtual_network_in_linux/</link>
      <pubDate>Sat, 26 Aug 2017 15:15:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/virtual_network_in_linux/</guid>
      <description>Linux 中的虚拟网络-简介 引言 随着云计算的兴起，计算机的虚拟化达到了空前的热度，计算机的虚拟化加强了服务器负载的能力，更有效的利用计算机资源。
Linux中的真实网络设备 Linux的网络设备像一个双向的管道，数据从一头进，就会从另一头出，关键要看这两头是什么？真实的网络设备中，如下图的eth0，
一头是网络协议栈，另一头网卡。用户发送数据的时候经过socket api调用，进入Linux 网络协议栈处理，再进入Linux 网络设备，最后进入网卡，
如果是接收数据则反过来。
+-------------------------------------------+ | | | +-------------------+ | | | User Application | | | +-------------------+ | | | | |.................|.........................| | ↓ | | +----------+ | | | socket | | | +----------+ | | | | |.................|.........................| | ↓ | | +------------------------+ | | | Newwork Protocol Stack | | | +------------------------+ | | | | |.................|.........................| | ↓ | | +----------------+ | | | eth0 | | | +----------------+ | | 192.</description>
    </item>
    
    <item>
      <title>平时整理的一些golang代码片段</title>
      <link>https://zboya.github.io/post/golang_code_slice/</link>
      <pubDate>Tue, 22 Aug 2017 19:23:15 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_code_slice/</guid>
      <description>golang 代码片段 by boya
老司机请忽略！
 用chan实现斐波那契数列  import &amp;quot;fmt&amp;quot; func fibonacci(c, quit chan int) { x, y := 0, 1 for { select { case c &amp;lt;- x: x, y = y, x+y case &amp;lt;-quit: fmt.Println(&amp;quot;quit&amp;quot;) return } } } func main() { c := make(chan int) quit := make(chan int) go func() { for i := 0; i &amp;lt; 10; i++ { fmt.Println(&amp;lt;-c) } quit &amp;lt;- 0 }() fibonacci(c, quit) }   字符串的简单映射  func main() { rot13 := func(r rune) rune { switch { case r &amp;gt;= &#39;A&#39; &amp;amp;&amp;amp; r &amp;lt;= &#39;Z&#39;: return &#39;A&#39; + (r-&#39;A&#39;+13)%26 case r &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; r &amp;lt;= &#39;z&#39;: return &#39;a&#39; + (r-&#39;a&#39;+13)%26 } return r } fmt.</description>
    </item>
    
    <item>
      <title>Golang代码规范</title>
      <link>https://zboya.github.io/post/golang_code_specification/</link>
      <pubDate>Wed, 02 Aug 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_code_specification/</guid>
      <description>Golang代码规范 参考https://golang.org/doc/effective_go.html
项目目录结构规范 PROJECT_NAME ├── README.md 介绍软件及文档入口 ├── bin 编译好的二进制文件,执行./build.sh自动生成，该目录也用于程序打包 ├── build.sh 自动编译的脚本 ├── doc 该项目的文档 ├── pack 打包后的程序放在此处 ├── pack.sh 自动打包的脚本，生成类似xxxx.20170713_14:45:35.tar.gz的文件，放在pack文件下 └── src 该项目的源代码 ├── main 项目主函数 ├── model 项目代码 ├── research 在实现该项目中探究的一些程序 └── vendor 存放go的库 ├── github.com/xxx 第三方库 └── xxx.com/obc 公司内部的公共库  项目的目录结构尽量做到简明、层次清楚
文件名命名规范 用小写，尽量见名思义，看见文件名就可以知道这个文件下的大概内容，对于源代码里的文件，文件名要很好的代表了一个模块实现的功能。
命名规范 包名 包名用小写,使用短命名,尽量和标准库不要冲突
接口名 单个函数的接口名以&amp;rdquo;er&amp;rdquo;作为后缀，如Reader,Writer
接口的实现则去掉“er”
type Reader interface { Read(p []byte) (n int, err error) }  两个函数的接口名综合两个函数名
type WriteFlusher interface { Write([]byte) (int, error) Flush() error }  三个以上函数的接口名，类似于结构体名</description>
    </item>
    
    <item>
      <title>udp编程的那些事与golang udp的实践</title>
      <link>https://zboya.github.io/post/golang_udp_programing/</link>
      <pubDate>Mon, 19 Jun 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_udp_programing/</guid>
      <description>udp编程的那些事与golang udp的实践 tcp/ip大协议中，tcp编程大家应该比较熟，应用的场景也很多，但是udp在现实中，应用也不少，而在大部分博文中，都很少对udp的编程进行研究，最近研究了一下udp编程，正好做个记录。
sheepbao 2017.06.15
tcp Vs udp tcp和udp都是著名的传输协议，他们都是基于ip协议，都在OSI模型中传输层。tcp我们都很清楚，它提供了可靠的数据传输，而udp我们也知道，它不提供数据传输的可靠性，只是尽力传输。 他们的特性决定了它们很大的不同，tcp提供可靠性传输，有三次握手，4次分手，相当于具有逻辑上的连接，可以知道这个tcp连接的状态，所以我们都说tcp是面向连接的socket，而udp没有握手，没有分手，也不存在逻辑上的连接，所以我们也都说udp是非面向连接的socket。
我们都畏惧不知道状态的东西，所以即使tcp的协议比udp复杂很多，但对于系统应用层的编程来说，tcp编程其实比udp编程容易。而udp相对比较灵活，所以对于udp编程反而没那么容易，但其实掌握后udp编程也并不难。
udp协议 udp的首部 2 2 (byte) +---+---+---+---+---+---+---+---+ - | src port | dst port | | +---+---+---+---+---+---+---+---+ 8（bytes） | length | check sum | | +---+---+---+---+---+---+---+---+ - | | + data + | | +---+---+---+---+---+---+---+---+  udp的首部真的很简单，头2个字节表示的是原端口，后2个字节表示的是目的端口，端口是系统层区分进程的标识。接着是udp长度，最后就是校验和，这个其实很重要，现在的系统都是默认开启udp校验和的，所以我们才能确保udp消息传输的完整性。如果这个校验和关闭了，那会让我们绝对会很忧伤，因为udp不仅不能保证数据一定到达，还不能保证即使数据到了，这个数据是否是正确的。比如：我在发送端发送了“hello”，而接收端却接收到了“hell”。如果真的是这样，我们就必须自己去校验数据的正确性。还好udp默认开发了校验，我们可以保证udp的数据完整性。
udp数据的封装 +---------+ | 应用数据 | +---------+ | | v v +---------+---------+ | udp首部 | 应用数据 | +---------+---------+ | | v UDP数据报 v +---------+---------+---------+ | ip首部 | udp首部 | 应用数据 | +---------+---------+---------+ | | v IP数据报 v +---------+---------+---------+---------+---------+ |以太网首部 | ip首部 | udp首部 | 应用数据 |以太网尾部 | +---------+---------+---------+---------+---------+ | 14 20 8 4 | | -&amp;gt; 以太网帧 &amp;lt;- |  数据的封装和tcp是一样，应用层的数据加上udp首部，构成udp数据报，再加上ip首部构成ip数据报，最后加上以太网首部和尾部构成以太网帧，经过网卡发送出去。</description>
    </item>
    
    <item>
      <title>Go1.9的主要更新</title>
      <link>https://zboya.github.io/post/go1.9_note/</link>
      <pubDate>Sat, 17 Jun 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/go1.9_note/</guid>
      <description>Go1.9的主要更新 golang每半年更新一次版本，上次最新的版本是Go1.8，而Go1.9将在今年8月释出。
Go1.9中语法的更改只有一个，那就是增加了类型别名，大部分更改是工具链，运行时，库的更改，
语法的更改 Go1.9中增加了类型别名这个语法，类型别名可以更优雅的实现当两个包之间struct的移动。类型别名的语法如下：
type T1 = T2  意思是声明一个T2类型的别名T1.
工具 并行编译 在Go1.9中并行编译啊包是默认的设置，如果需要关闭并行编译，需要设置环境变量GO19CONCURRENTCOMPILATION=0。
./&amp;hellip;可以匹配vendor了 应各位亲们的要求，之前./...不支持匹配vendor目录下的文件，现在Go1.9支持了。
性能 通常来说，很难去描述这些更改对各种场景的性能影响。大部分程序都应该运行的更快了，因为gc的提升，代码生成的更好和核心库的优化。
垃圾回收 在Go1.9之前，很多库函数都是会触发stop-the-world的，而现在只会触发并发的垃圾回收。比如：runtime.GC,debug.SetGCPerent and debug.FreeOSMemory,现在只会触发并发的垃圾回收，只会阻塞当前正在调用的goroutine，直到gc完成。
debug.SetGCPrercent函数。。。 大对象的分配性能显著的提高，当应用程序使用超大的堆(&amp;gt;50G)，里面包含许多大对象。
runtime.ReadMemStats函数现在读取大堆的时间少于100us。
核心库 并发的map 好吧，终于官方支持了，在sync包中新增了Map类型，这个Map是线程安全的map。
time包支持显示单调 Go1.9的time包支持每个Time值都是单调时间，这样能使当系统时间改变的时候，计算两个时间差也是安全的。具体看package docs和design doc
新的位操作包 Go1.9新增了一个包，叫math/bits,提供一些位操作的优化。
参考 go1.9 release notes</description>
    </item>
    
    <item>
      <title>kcp-go源码解析</title>
      <link>https://zboya.github.io/post/kcp_source_analysis/</link>
      <pubDate>Mon, 12 Jun 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/kcp_source_analysis/</guid>
      <description>kcp-go源码解析 对kcp-go的源码解析，有错误之处，请一定告之。
sheepbao 2017.0612
概念 ARQ:自动重传请求(Automatic Repeat-reQuest,ARQ)是OSI模型中数据链路层的错误纠正协议之一.
RTO:Retransmission TimeOut
FEC:Forward Error Correction
kcp简介 kcp是一个基于udp实现快速、可靠、向前纠错的的协议，能以比TCP浪费10%-20%的带宽的代价，换取平均延迟降低30%-40%，且最大延迟降低三倍的传输效果。纯算法实现，并不负责底层协议（如UDP）的收发。查看官方文档kcp
kcp-go是用go实现了kcp协议的一个库，其实kcp类似tcp，协议的实现也很多参考tcp协议的实现，滑动窗口，快速重传，选择性重传，慢启动等。
kcp和tcp一样，也分客户端和监听端。
 +-+-+-+-+-+ +-+-+-+-+-+ | Client | | Server | +-+-+-+-+-+ +-+-+-+-+-+ |------ kcp data ------&amp;gt;| |&amp;lt;----- kcp data -------|  kcp协议 layer model +----------------------+ | Session | +----------------------+ | KCP(ARQ) | +----------------------+ | FEC(OPTIONAL) | +----------------------+ | CRYPTO(OPTIONAL)| +----------------------+ | UDP(Packet) | +----------------------+  KCP header KCP Header Format
 4 1 1 2 (Byte) +---+---+---+---+---+---+---+---+ | conv |cmd|frg| wnd | +---+---+---+---+---+---+---+---+ | ts | sn | +---+---+---+---+---+---+---+---+ | una | len | +---+---+---+---+---+---+---+---+ | | + DATA + | | +---+---+---+---+---+---+---+---+  代码结构 src/vendor/github.</description>
    </item>
    
    <item>
      <title>Golang逃逸分析</title>
      <link>https://zboya.github.io/post/golang_escape_analysis/</link>
      <pubDate>Sun, 11 Jun 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_escape_analysis/</guid>
      <description>Golang逃逸分析 介绍逃逸分析的概念，go怎么开启逃逸分析的log。
以下资料来自互联网，有错误之处，请一定告之。
sheepbao 2017.06.10
什么是逃逸分析 wiki上的定义 In compiler optimization, escape analysis is a method for determining the dynamic scope of pointers - where in the program a pointer can be accessed. It is related to pointer analysis and shape analysis.
When a variable (or an object) is allocated in a subroutine, a pointer to the variable can escape to other threads of execution, or to calling subroutines. If an implementation uses tail call optimization (usually required for functional languages), objects may also be seen as escaping to called subroutines.</description>
    </item>
    
    <item>
      <title>sms golang实现的流媒体服务器</title>
      <link>https://zboya.github.io/post/golang_stream_server/</link>
      <pubDate>Sun, 02 Apr 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_stream_server/</guid>
      <description>sms 用golang实现的流媒体服务器,来自开源，现在回馈给开源社区。
特性  模块化，易扩展 高性能，易部署，跨平台 支持rtmp推拉流 支持http-flv分发 支持hls分发 支持http接口请求来推拉流  源码编译 git clone https://github.com/sheepbao/sms.git cd sms ./build.sh  交叉编译 ./build.sh linux arm // or ./build.sh os arch  运行 ./bin/sms  项目地址 github: https://github.com/sheepbao/sms</description>
    </item>
    
    <item>
      <title>golang 简介</title>
      <link>https://zboya.github.io/post/golang_brief_introduction/</link>
      <pubDate>Sun, 22 Jan 2017 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_brief_introduction/</guid>
      <description>golang 简介 来历 很久以前，有一个IT公司，这公司有个传统，允许员工拥有20%自由时间来开发实验性项目。在2007的某一天，公司的几个大牛，正在用c++开发一些比较繁琐但是核心的工作，主要包括庞大的分布式集群，大牛觉得很闹心，后来c++委员会来他们公司演讲，说c++将要添加大概35种新特性。这几个大牛的其中一个人，名为：Rob Pike，听后心中一万个xxx飘过，“c++特性还不够多吗？简化c++应该更有成就感吧”。于是乎，Rob Pike和其他几个大牛讨论了一下，怎么解决这个问题，过了一会，Rob Pike说要不我们自己搞个语言吧，名字叫“go”，非常简短，容易拼写。其他几位大牛就说好啊，然后他们找了块白板，在上面写下希望能有哪些功能（详见问尾）。接下来的时间里，大牛们开心的讨论设计这门语言的特性，经过漫长的岁月，他们决定，以c语言为原型，以及借鉴其他语言的一些特性，来解放程序员，解放自己，然后在2009年，go语言诞生。
思想 Less can be more 大道至简,小而蕴真 让事情变得复杂很容易，让事情变得简单才难 深刻的工程文化
优点  自带gc。 静态编译，编译好后，扔服务器直接运行。 简单的思想，没有继承，多态，类等。 丰富的库和详细的开发文档。 语法层支持并发，和拥有同步并发的channel类型，使并发开发变得非常方便。 简洁的语法，提高开发效率，同时提高代码的阅读性和可维护性。 超级简单的交叉编译，仅需更改环境变量。（花了我两天时间编译一个imagemagick到arm平台） 内含完善、全面的软件工程工具。Go语言自带的命令和工具相当地强大。通过它们，我们可以很轻松地完成Go语言程序的获取、编译、测试、安装、运行、运行分析等一系列工作，这几乎涉及了开发和维护一个软件的所有环节。  hello package main func main(){ println(&amp;quot;hello, sewise&amp;quot;) }  type 主要讲讲特有的类型，其他基本类型不做介绍
slice 切片：可以理解为动态数组，类似c++的vector 声明一个slice
var slice []T 如： var ints []int  slice的追加
ints=append(ints,1) ints=append(ints,2,3,4,5)  slice的截取
newInts1:=ints[2:3] newInts2:=ints[2:] newInts3:=ints[:4]  map 字典：键值对
var json map[string]string  interface 接口：方法的集合,是一种合约 栗子： 声明一个bird接口
var bird interface{ fly() }  声明一个hen对象(实现bird接口)</description>
    </item>
    
    <item>
      <title>我的2016-成长之年</title>
      <link>https://zboya.github.io/post/mylife_2016/</link>
      <pubDate>Sat, 31 Dec 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/mylife_2016/</guid>
      <description>type summary struct { Time time.Time // 2016.12.31 Author string // sheepbao Location string // shenzhen } func SayHelloTo2017() { println(` we try hard . cos we are creating the world . hello world !. hello 2017 ! `) }  说点啥 其实是看到挺多人写2016的总结，自己心痒也想写一个，当作记录吧，不写的话，很有可能以后就忘了，主要说说自己在2016的感受。
感谢的话 感谢的有很多人，父母兄弟姐妹，亲戚好友都是很感谢的，木有他们也木有现在的我，2016大部分时间是在深圳，遇到不少人和不少事，最亲爱的Lavinia，以前listome的同事，现在sewise的同事，都很感谢。感谢Lavinia，给我的生活带来不一样的色彩，遇到你是我最大的幸运。感谢啊汪，牛逼的大学室友，虽然最后离我而去（离开深圳），说要上天，但还是很感谢。感谢徐总、陈哥和雯姐，我才有另一个机会，以不同的人生轨迹步入深圳，虽然我最后离开了，但是我也衷心希望listome越来越好。感谢肖大哥，教我很多互联网和编程知识，和你聊互联网历史很开心。感谢Richard和Eric，让我进入现在的公司，带领着我们前进，也认识很多优秀的同事，和他们学习了很多知识和技能，让我成长，特别是Kinov，总是孜孜不倦的教我，非常感谢，希望来年能更多的参与公司的项目，贡献自己的力量。
补基础 万丈高楼平地起，知识结构也是一样的，基础的重要不言而喻，特别作为一个非科班出身的我，很多基础知识要补：
 看了个linux网络编程，内容很详细，由浅入深，可以学到linux下网络的编程是怎样的，也认识了很多底层的系统接口。 看了个go网络编程，很好的一本书，而且是中英文双语版，讲了go很多基础的网络编程，对http协议也讲的比较详细，这本书我几乎是在火车上看完的（深圳 往返 厦门）。 看了个The Go Programming Language，也叫go语言圣经，非常好的一本书，主要是例子超多，几乎整本书都在讲各种例子，而学习各种例子可以加深理解语言的特性。 看了个go并发编程实战，也是非常好的一本书，郝大写的，明年会出第二版，现在这个版本内容很多，虽然很详细，但有些内容还是有赘述且例子比较少。不过看完这本书完全可以用go写项目了。 看了个docker源码分析，内容很浅显，讲了docker的基本架构，源码分析的其实比较少，并没有深入，有点坑。 看了个计算机网络，感觉和大学的时候看的计算机网络 谢希仁版知识点重合，复习了一遍。 看了个数据结构，教授讲的很好，学习了基础的List、Queue、Stack、Tree和Graph，基本的排序和排序算法的复杂度，基本的遍历方法BFS和DFS。 看了个TML+CSS基础课程，我只想说真的好基础，离我自己写个网页还好大距离。 看了个JS实现人机大战之五子棋，业余时间按着课程写的小游戏，后来用go写了后台，用socket.io和前端通信，实现了双人在线版，也把自己电脑映射到公网，和异地朋友玩了一下。后来又写了个多人在线画画，前端js，后端go，通信用websocket。 2016写了几篇博客sheepbao，写博客确实是个好习惯，整理思路，加深自己的理解，有错的话，别人还会帮你提出来，多好，希望来年多写写。
实战和项目 作为一枚码农，实战和项目是最能提高和锻炼自身水平的。2016的项目并不多，来到新公司，学习了很多流媒体的知识，一个领域就有其领域的专业知识，对于我，学习这些是必须的，今年主要学习各种流媒体应用层协议，来年要学学编解码和播放器的知识。
 写了个gomitmproxy，但并没有写完，主要学习了http和https协议，现在来看，代码应该重构了，终端的输出也要用TermUI写过。
 go写了个消息系统</description>
    </item>
    
    <item>
      <title>Golang 字符串连接性能探究</title>
      <link>https://zboya.github.io/post/golang_string_connect_performance/</link>
      <pubDate>Mon, 12 Dec 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_string_connect_performance/</guid>
      <description>Golang 字符串连接性能探究 为何探究 几乎所有的软件项目，不管是什么语言，都会用到处理字符串，而拼接字符是最基本，也最常用的。一般连接字符串都有好几种方式，不同的方式适合不同的场景，此次仅探究如果快速动态连接大量的字符串。
相关问题  https://gocn.io/question/265&amp;amp;sort_key=agree_count&amp;amp;sort=DESC http://stackoverflow.com/questions/1760757/how-to-efficiently-concatenate-strings-in-go/23857998  探究的代码 还是代码最明了
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;time&amp;quot; ) var way map[int]string func benchmarkStringFunction(n int, index int) (d time.Duration) { v := &amp;quot;ni shuo wo shi bu shi tai wu liao le a?&amp;quot; var s string var buf bytes.Buffer t0 := time.Now() for i := 0; i &amp;lt; n; i++ { switch index { case 0: // fmt.Sprintf s = fmt.</description>
    </item>
    
    <item>
      <title>golang开启GODEBUG=gctrace=1 显示信息的含义</title>
      <link>https://zboya.github.io/post/golang_debug_gctrace/</link>
      <pubDate>Sat, 03 Dec 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_debug_gctrace/</guid>
      <description>golang开启GODEBUG gctrace =1 显示信息的含义 如何开启打印gc信息 只要在程序执行之前加上环境变量GODEBUG=gctrace=1 ，如：
GODEBUG=gctrace=1 ./xxxx.exe or GODEBUG=gctrace=1 go run main.go
程序将会显示gc信息，如下
gc 1 @2.104s 0%: 0.018+1.3+0.076 ms clock, 0.054+0.35/1.0/3.0+0.23 ms cpu, 4-&amp;gt;4-&amp;gt;3 MB, 5 MB goal, 4 P gc 2 @2.241s 0%: 0.019+2.4+0.077 ms clock, 0.079+0/2.4/6.4+0.30 ms cpu, 5-&amp;gt;6-&amp;gt;5 MB, 6 MB goal, 4 P gc 3 @2.510s 0%: 0.011+3.2+0.063 ms clock, 0.047+0.10/2.9/9.0+0.25 ms cpu, 11-&amp;gt;11-&amp;gt;10 MB, 12 MB goal, 4 P gc 4 @3.021s 0%: 0.</description>
    </item>
    
    <item>
      <title>RTMP协议学习笔记</title>
      <link>https://zboya.github.io/post/rtmp_note/</link>
      <pubDate>Tue, 13 Sep 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/rtmp_note/</guid>
      <description>RTMP协议笔记 请用电脑或者手机横屏查看，不然会格式乱。
RTMP的背景和应用 每项技术都有起来源，RTMP也不例外，RTMP是Adobe公司公布的一项协议,Adobe是一家世界领先数字媒体和在线营销方案的供应商。在H5崛起之前，几乎所有的浏览器都用Flash player播放多媒体资源，而服务端和浏览器之间就是用RTMP协议或者在RTMP协议变种后的协议进行通信的。
RTMP协议概览 握手、消息块概念 握手的目的是为了确认对端RTMP的Version和确认对端能互相通信。 消息块就是消息的载体，是RTMP协议最重要的载体，这个载体是有一定格式的，如果把Client和Server端当作铁路的两个站点，那这个消息块就是火车，它负责运输货物。正如火车有火车头、车厢一样，消息块也有基本头，消息头和消息负载。RTMP协议当中，除了握手协议，其他的数据都是以消息块的方式发送的，发送一个消息时，当块大小比需要发送的消息的字节数更大时，一个消息块就相当于一个消息，否则消息需要分成多个消息块。  握手 +-+-+-+-+-+-+ +-+-+-+-+-+-+ | Client | | Server | +-+-+-+-+-+-+ +-+-+-+-+-+-+ |-------- C0C1 --------&amp;gt;| |&amp;lt;------ S0S1S2 --------| |--------- C2 ---------&amp;gt;|   C0和S0的格式（1 byte）
+-+-+-+-+-+-+-+-+ | version | +-+-+-+-+-+-+-+-+  C1和S1的格式
+-+-+-+-+-+-+-+-+-+-+ | time (4 bytes) | +-+-+-+-+-+-+-+-+-+-+ | zero (4 bytes) | +-+-+-+-+-+-+-+-+-+-+ | random bytes | +-+-+-+-+-+-+-+-+-+-+ |random bytes(cont) | | .... | +-+-+-+-+-+-+-+-+-+-+  time: 4 字节 本字段包含时间戳。该时间戳应该是发送这个数据块的端点的后续块的时间起始点。可以是 0 ,或其他的任何值。为了同步多个流,端点可能发送其块流的当前值。 zero: 4 字节 本字段必须是全零。 random bytes: 1528 字节。 本字段可以包含任何值。因为每个端点必须用自己初始化的握手和对端初始化的</description>
    </item>
    
    <item>
      <title>golang 后端开发思维导图</title>
      <link>https://zboya.github.io/post/golang_backend_mind_map/</link>
      <pubDate>Sun, 17 Jul 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_backend_mind_map/</guid>
      <description>golang 后端开发思维导图 自己画的golang后台开发思维导图，当作笔记。 转载请注明原作者。 by sheepbao.</description>
    </item>
    
    <item>
      <title>深入理解go的slice和到底什么时候该用slice</title>
      <link>https://zboya.github.io/post/understand_golang_slice/</link>
      <pubDate>Mon, 27 Jun 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/understand_golang_slice/</guid>
      <description>深入理解go的slice和到底什么时候该用slice 前言 用过go语言的亲们都知道，slice（中文翻译为切片）在编程中经常用到，它代表变长的序列，序列中每个元素都有相同的类型，类似一个动态数组，利用append可以实现动态增长，利用slice的特性可以很容易的切割slice，它们是怎么实现这些特性的呢？现在我们来探究一下这些特性的本质是什么。
先了解一下slice的特性  定义一个slice
s := []int{1,2,3,4,5} fmt.Println(s) // [1 2 3 4 5]  一个slice类型一般写作[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已。
 slice的扩容
s := []int{1,2,3,4,5} s = append(s, 6) fmt.Println(s) // [1 2 3 4 5 6]  内置append函数在现有数组的长度 &amp;lt; 1024 时 cap 增长是翻倍的，再往上的增长率则是 1.25，至于为何后面会说。
 slice的切割
s := []int{1,2,3,4,5,6} s1 := s[0:2] fmt.Println(s1) // [1 2] s2 := s[4:] fmt.Println(s2) // [5 6] s3 := s[:4] fmt.Println(s3) // [1 2 3 4]  slice作为函数参数</description>
    </item>
    
    <item>
      <title>用golang写一个http代理，可以抓包和科学上网</title>
      <link>https://zboya.github.io/post/golang_http_proxy/</link>
      <pubDate>Wed, 15 Jun 2016 11:58:40 +0800</pubDate>
      
      <guid>https://zboya.github.io/post/golang_http_proxy/</guid>
      <description>用golang写一个http代理，可以抓包和科学上网 缘起 因为在工作中需要对上网进行限制，只让我们的app上网，意思就是放行app请求的所有域名或ip，而其他域名都禁止，所以我需要对app的http请求进行抓包。上网搜了一下，win下的fiddler不错，可惜我用的是Linux系统，fiddler不跨平台，找了下linux下的抓包软件，当然tcpdump和wireshare是足够强大的，完全可以实现我要的小小要求，但用起来有一定的复杂性，门槛稍高。在网上找到其他类似的软件还挺多，charles、NProxy等，最后发现mitmproxy最符合我的胃口，如图： 但是mitmproxy的安装依赖太多，python就是这样，一不小心就报错了，so，想着用golang实现类似的功能，自己也很喜欢go语言，如果有空能安静写写自己喜欢的代码，是多么的幸福。想好了就实践，Let&amp;rsquo;s do it，当然凡事都有个从简到繁的过程，下面的特性慢慢增加。
特性 特性，也可以说功能，以下是实现或者将要实现的特性
http代理 http请求响应的抓取 修改http请求 重复请求 同时监听多端口 支持socks5、websocket、https协议 界面支持终端和网页两种形式  安装 git clone https://github.com/sheepbao/gomitmproxy.git cd gomitmproxy go build  使用  http代理  gomimtproxy  不带任何参数，表示http代理，默认端口8080,更改端口用 -port
 http抓包  gomimtproxy -m  加 -m 参数，表示抓取http请求和响应  http代理科学上网
首先你得有个墙外的服务器，如阿里香港的服务器，为图中的Server，假设其ip地址为：22.222.222.222
  在Server执行: gomitmproxy -port 8888  在你自己电脑执行: gomitmproxy -port 8080 -raddr 22.222.222.222:8888  然后浏览器设置代理，ip为localhost，端口为8080,即可实现科学上网
源码简析 对于网络编程，Anything is a socket! 实现http代理并不难，简单地说就是用代理服务器代替客户端去请求web服务，然后在把请求的结果返回给客户端。 先来个示意图：  1. 客户端发起一个到gomitmproxy的连接，并且提交了HTTP CONNECT请求。 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zboya.github.io/post/%E5%A6%82%E4%BD%95%E6%8E%92%E9%99%A4%E5%92%8C%E5%A4%84%E7%90%86bug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zboya.github.io/post/%E5%A6%82%E4%BD%95%E6%8E%92%E9%99%A4%E5%92%8C%E5%A4%84%E7%90%86bug/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>